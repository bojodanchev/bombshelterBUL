// hooks/useFrameworkReady.ts
import { useEffect, useState } from 'react';
import { Platform } from 'react-native';
import * as SplashScreen from 'expo-splash-screen';
import { getShelters, importSheltersFromJson } from '../utils/storage';

// –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ JSON –¥–∞–Ω–Ω–∏—Ç–µ - –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –ø—ä—Ç—è—Ç –µ –ø—Ä–∞–≤–∏–ª–µ–Ω
let sheltersData: any = null;
try {
  sheltersData = require('../assets/data/bomb_shelters_opencage_geocoded_20250603_103516.json');
} catch (error) {
  console.warn('JSON —Ñ–∞–π–ª—ä—Ç –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∑–∞—Ä–µ–¥–µ–Ω:', error);
}

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è–≤–∞–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ splash screen
SplashScreen.preventAutoHideAsync().catch(() => {
  // Ignore error if splash screen is already hidden
});

export function useFrameworkReady() {
  const [isReady, setIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        console.log('üöÄ –ó–∞–ø–æ—á–≤–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ...');

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞–º–µ –¥–∞–Ω–Ω–∏ –∑–∞ —É–±–µ–∂–∏—â–∞
        let shelters = await getShelters();

        // –ê–∫–æ –Ω—è–º–∞ –¥–∞–Ω–Ω–∏, –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –æ—Ç JSON —Ñ–∞–π–ª–∞
        if (shelters.length === 0 && sheltersData) {
          console.log('üìÇ –ù—è–º–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ –¥–∞–Ω–Ω–∏, –∏–º–ø–æ—Ä—Ç–∏—Ä–∞–º –æ—Ç JSON —Ñ–∞–π–ª–∞...');
          try {
            shelters = await importSheltersFromJson(sheltersData);
            console.log(
              `‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–∏ ${shelters.length} —É–±–µ–∂–∏—â–∞ –ø—Ä–∏ –ø—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ`
            );
          } catch (error) {
            console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç –Ω–∞ –¥–∞–Ω–Ω–∏:', error);
            // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ —â–µ —Ä–∞–±–æ—Ç–∏ –±–µ–∑ –¥–∞–Ω–Ω–∏
          }
        } else if (shelters.length > 0) {
          console.log(`üìä –ó–∞—Ä–µ–¥–µ–Ω–∏ ${shelters.length} —É–±–µ–∂–∏—â–∞ –æ—Ç storage`);
        } else {
          console.warn('‚ö†Ô∏è –ù—è–º–∞ JSON —Ñ–∞–π–ª –∏ –Ω—è–º–∞ –∑–∞–ø–∞–∑–µ–Ω–∏ –¥–∞–Ω–Ω–∏');
        }

        // –ú–∞–ª–∫–æ –∏–∑—á–∞–∫–≤–∞–Ω–µ –∑–∞ –¥–∞ —Å–µ –∑–∞—Ä–µ–¥—è—Ç –≤—Å–∏—á–∫–∏ —Ä–µ—Å—É—Ä—Å–∏
        await new Promise((resolve) => setTimeout(resolve, 500));
      } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ:', error);
      } finally {
        // –ú–∞—Ä–∫–∏—Ä–∞–º–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –∫–∞—Ç–æ –≥–æ—Ç–æ–≤–æ
        setIsReady(true);
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –≥–æ—Ç–æ–≤–æ');
      }
    }

    prepare();
  }, []);

  useEffect(() => {
    // –°–∫—Ä–∏–≤–∞–º–µ splash screen –∫–æ–≥–∞—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –µ –≥–æ—Ç–æ–≤–æ
    if (isReady) {
      const hideSplash = async () => {
        try {
          await SplashScreen.hideAsync();
        } catch (error) {
          // Splash screen –º–æ–∂–µ –≤–µ—á–µ –¥–∞ –µ —Å–∫—Ä–∏—Ç
          console.log('Splash screen –≤–µ—á–µ –µ —Å–∫—Ä–∏—Ç');
        }
      };

      // –ú–∞–ª–∫–æ –∑–∞–∫—ä—Å–Ω–µ–Ω–∏–µ –∑–∞ –ø–ª–∞–≤–µ–Ω –ø—Ä–µ—Ö–æ–¥
      setTimeout(hideSplash, 100);
    }
  }, [isReady]);

  return isReady;
}

/**
 * Hook –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
 */
export function useDataStatus() {
  const [dataLoaded, setDataLoaded] = useState(false);
  const [shelterCount, setShelterCount] = useState(0);
  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    async function checkDataStatus() {
      try {
        setIsLoading(true);
        const shelters = await getShelters();
        setShelterCount(shelters.length);
        setDataLoaded(shelters.length > 0);

        // –ú–æ–∂–µ–º –¥–∞ –¥–æ–±–∞–≤–∏–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∞ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è
        // const { getLastUpdate } = await import('../utils/storage');
        // const update = await getLastUpdate();
        // setLastUpdate(update);

        console.log(`üìä Data status: ${shelters.length} —É–±–µ–∂–∏—â–∞ –∑–∞—Ä–µ–¥–µ–Ω–∏`);
      } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ:', error);
        setDataLoaded(false);
      } finally {
        setIsLoading(false);
      }
    }

    checkDataStatus();
  }, []);

  const refreshData = async () => {
    setIsLoading(true);
    try {
      const shelters = await getShelters();
      setShelterCount(shelters.length);
      setDataLoaded(shelters.length > 0);
    } catch (error) {
      console.error('Error refreshing data:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return {
    dataLoaded,
    shelterCount,
    lastUpdate,
    isLoading,
    refreshData,
  };
}

/**
 * Hook –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ app state
 */
export function useAppState() {
  const [appState, setAppState] = useState<'loading' | 'ready' | 'error'>(
    'loading'
  );
  const [error, setError] = useState<string | null>(null);

  const isReady = useFrameworkReady();
  const { dataLoaded, shelterCount, isLoading } = useDataStatus();

  useEffect(() => {
    if (isReady && !isLoading) {
      if (dataLoaded && shelterCount > 0) {
        setAppState('ready');
        setError(null);
        console.log('‚úÖ App state: –≥–æ—Ç–æ–≤–æ —Å –¥–∞–Ω–Ω–∏');
      } else if (dataLoaded && shelterCount === 0) {
        setAppState('error');
        setError('–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —É–±–µ–∂–∏—â–∞');
        console.log('‚ö†Ô∏è App state: –≥–æ—Ç–æ–≤–æ –Ω–æ –Ω—è–º–∞ –¥–∞–Ω–Ω–∏');
      } else {
        // –ü–æ–∑–≤–æ–ª—è–≤–∞–º–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ—Ç–æ –¥–∞ —Ä–∞–±–æ—Ç–∏ –¥–æ—Ä–∏ –±–µ–∑ –¥–∞–Ω–Ω–∏
        setAppState('ready');
        setError('–î–∞–Ω–Ω–∏—Ç–µ —â–µ –±—ä–¥–∞—Ç –∑–∞—Ä–µ–¥–µ–Ω–∏ –ø–æ-–∫—ä—Å–Ω–æ');
        console.log('‚ö†Ô∏è App state: –≥–æ—Ç–æ–≤–æ –±–µ–∑ –¥–∞–Ω–Ω–∏');
      }
    }
  }, [isReady, dataLoaded, shelterCount, isLoading]);

  const retryDataLoad = async () => {
    setAppState('loading');
    setError(null);

    // Trigger data refresh
    window.location?.reload?.(); // –ó–∞ web
    // –ó–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–∂–µ–º –¥–∞ –∏–∑–ø–æ–ª–∑–≤–∞–º–µ Updates API
  };

  return {
    appState,
    error,
    isReady,
    dataLoaded,
    shelterCount,
    retryDataLoad,
  };
}

/**
 * Hook –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—Ä–µ–∂–æ–≤–∞ —Å–≤—ä—Ä–∑–∞–Ω–æ—Å—Ç (optional)
 */
export function useNetworkStatus() {
  const [isConnected, setIsConnected] = useState(true);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å–º–µ –≤ web —Å—Ä–µ–¥–∞ —Å window –∏ navigator.onLine
    if (
      typeof window !== 'undefined' &&
      typeof window.addEventListener === 'function' &&
      typeof navigator !== 'undefined' &&
      typeof navigator.onLine === 'boolean'
    ) {
      setIsConnected(navigator.onLine);

      const handleOnline = () => {
        console.log('Network status: online');
        setIsConnected(true);
      };
      const handleOffline = () => {
        console.log('Network status: offline');
        setIsConnected(false);
      };

      window.addEventListener('online', handleOnline);
      window.addEventListener('offline', handleOffline);

      return () => {
        window.removeEventListener('online', handleOnline);
        window.removeEventListener('offline', handleOffline);
      };
    } else {
      // –ê–∫–æ —Å–º–µ –≤ React Native –∏–ª–∏ –¥—Ä—É–≥–∞ —Å—Ä–µ–¥–∞ –±–µ–∑ window, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–≤–∞–º–µ –∏ –æ—Å—Ç–∞–≤–∞–º–µ connected
      console.log(
        'Network status: cannot detect (non-web environment), assuming connected'
      );
      setIsConnected(true);
    }
  }, []);

  return isConnected;
}

/**
 * Hook –∑–∞ –æ–±—â–æ app initialization
 */
export function useAppInitialization() {
  const { appState, error, isReady, dataLoaded, shelterCount, retryDataLoad } =
    useAppState();
  const isConnected = useNetworkStatus();

  const isAppReady = appState === 'ready';
  const hasError = appState === 'error';
  const isLoading = appState === 'loading';

  return {
    isAppReady,
    hasError,
    isLoading,
    isConnected,
    error,
    shelterCount,
    dataLoaded,
    retryDataLoad,
    // Debugging info
    debug: {
      isReady,
      appState,
      dataLoaded,
      shelterCount,
    },
  };
}
